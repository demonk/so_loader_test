apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "cn.demonk.test2"
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

configurations {
    pack_dep
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    pack_dep project(':dyapk')
}

android.applicationVariants.all { variant ->
    def bType = variant.buildType.name

    def mergeassets = project.tasks.getByName("merge${bType.capitalize()}Assets")

    configurations.pack_dep.allDependencies.each { ProjectDependency depend ->
        mergeassets.dependsOn ":${depend.getDependencyProject().name}:assemble${bType.capitalize()}"
    }

    mergeassets.doLast {
        configurations.pack_dep.allDependencies.each { ProjectDependency depend ->
            Project project = depend.getDependencyProject()
            project.android.applicationVariants.all { vari ->
                if (vari.buildType.name == bType) {
                    vari.outputs.each { output ->
                        copy {
                            from(output.outputFile)
                            into "${variant.mergeAssets.outputDir}"
                            rename '(.*).apk', 'dyapk.apk'
                            includeEmptyDirs = false
                        }
                    }
                }
            }
        }
    }
}
